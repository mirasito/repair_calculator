from flask import Flask, render_template, request, jsonify, g
import os
from dotenv import load_dotenv
import math
import json
import sqlite3

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect('repair_calculator.db')
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def setup_directories():
    if not os.path.exists('templates'):
        os.makedirs('templates')
    if not os.path.exists('static'):
        os.makedirs('static')

# –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≤ —Ç–µ–Ω–≥–µ)
PRICES = {
    'standard': {
        'materials': 15000,  # 3000 —Ä—É–± -> 15000 —Ç–≥
        'work': 10000,      # 2000 —Ä—É–± -> 10000 —Ç–≥
        'bathroom': {'materials': 7500, 'work': 5000},
        'kitchen': {'materials': 10000, 'work': 7500},
        'window': {'materials': 2500, 'work': 1500},
        'replanning': {'materials': 5000, 'work': 10000}
    },
    'standard_plus': {
        'materials': 25000,  # 5000 —Ä—É–± -> 25000 —Ç–≥
        'work': 15000,      # 3000 —Ä—É–± -> 15000 —Ç–≥
        'bathroom': {'materials': 12500, 'work': 7500},
        'kitchen': {'materials': 17500, 'work': 12500},
        'window': {'materials': 4000, 'work': 2500},
        'replanning': {'materials': 7500, 'work': 15000}
    },
    'premium': {
        'materials': 40000,  # 8000 —Ä—É–± -> 40000 —Ç–≥
        'work': 25000,      # 5000 —Ä—É–± -> 25000 —Ç–≥
        'bathroom': {'materials': 20000, 'work': 12500},
        'kitchen': {'materials': 30000, 'work': 20000},
        'window': {'materials': 6000, 'work': 4000},
        'replanning': {'materials': 12500, 'work': 25000}
    }
}

# –ë–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
STEP_DETAILS = {
    'replanning': {
        'icon': 'üèóÔ∏è',
        'materials': [
            {
                'name_ru': '–ö–∏—Ä–ø–∏—á —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π',
                'name_en': 'Construction brick',
                'unit_ru': '—à—Ç',
                'unit_en': 'pcs',
                'base_quantity': 100,  # –Ω–∞ 10 –∫–≤.–º.
                'base_price': 150
            },
            {
                'name_ru': '–†–∞—Å—Ç–≤–æ—Ä —Ü–µ–º–µ–Ω—Ç–Ω—ã–π',
                'name_en': 'Cement mortar',
                'unit_ru': '–∫–≥',
                'unit_en': 'kg',
                'base_quantity': 50,  # –Ω–∞ 10 –∫–≤.–º.
                'base_price': 100
            }
        ],
        'works': [
            {
                'name_ru': '–î–µ–º–æ–Ω—Ç–∞–∂ —Å—Ç–µ–Ω',
                'name_en': 'Wall demolition',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 2000
            },
            {
                'name_ru': '–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–µ–Ω',
                'name_en': 'Wall construction',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 3000
            }
        ]
    },
    'demolition': {
        'icon': 'üî®',
        'materials': [
            {'name': '–ú–µ—à–∫–∏ –¥–ª—è –º—É—Å–æ—Ä–∞', 'unit': '—à—Ç', 'price': 100},
            {'name': '–ü–µ—Ä—á–∞—Ç–∫–∏', 'unit': '–ø–∞—Ä', 'price': 500},
            {'name': '–ó–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏', 'unit': '—à—Ç', 'price': 800}
        ],
        'works': [
            {'name': '–î–µ–º–æ–Ω—Ç–∞–∂ —Å—Ç–µ–Ω', 'unit': '–º¬≤', 'price': 1500},
            {'name': '–î–µ–º–æ–Ω—Ç–∞–∂ –ø–æ–ª–∞', 'unit': '–º¬≤', 'price': 800},
            {'name': '–í—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞', 'unit': '–º¬≥', 'price': 2000}
        ]
    },
    'rough_work': {
        'icon': 'üèóÔ∏è',
        'materials': [
            {
                'name_ru': '–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞',
                'name_en': 'Plaster',
                'unit_ru': '–∫–≥',
                'unit_en': 'kg',
                'base_quantity': 30,  # –Ω–∞ 10 –∫–≤.–º.
                'base_price': 200
            },
            {
                'name_ru': '–ì—Ä—É–Ω—Ç–æ–≤–∫–∞',
                'name_en': 'Primer',
                'unit_ru': '–ª',
                'unit_en': 'l',
                'base_quantity': 5,  # –Ω–∞ 10 –∫–≤.–º.
                'base_price': 300
            }
        ],
        'works': [
            {
                'name_ru': '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω',
                'name_en': 'Wall leveling',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 1000
            },
            {
                'name_ru': '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ–ª–∞',
                'name_en': 'Floor leveling',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 800
            }
        ]
    },
    'plumbing': {
        'icon': 'üö∞',
        'materials': [
            {'name': '–¢—Ä—É–±—ã', 'unit': '–º', 'price': 800},
            {'name': '–§–∏—Ç–∏–Ω–≥–∏', 'unit': '—à—Ç', 'price': 500},
            {'name': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞', 'unit': '—à—Ç', 'price': 15000}
        ],
        'works': [
            {'name': '–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —Ç—Ä—É–±', 'unit': '–º', 'price': 1000},
            {'name': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏—Ç–∏–Ω–≥–æ–≤', 'unit': '—à—Ç', 'price': 300},
            {'name': '–ú–æ–Ω—Ç–∞–∂ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏', 'unit': '—à—Ç', 'price': 2000}
        ]
    },
    'electrical': {
        'icon': '‚ö°',
        'materials': [
            {'name': '–ö–∞–±–µ–ª—å', 'unit': '–º', 'price': 200},
            {'name': '–†–æ–∑–µ—Ç–∫–∏', 'unit': '—à—Ç', 'price': 500},
            {'name': '–í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏', 'unit': '—à—Ç', 'price': 400}
        ],
        'works': [
            {'name': '–ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è', 'unit': '–º', 'price': 300},
            {'name': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–∑–µ—Ç–æ–∫', 'unit': '—à—Ç', 'price': 400},
            {'name': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π', 'unit': '—à—Ç', 'price': 400}
        ]
    },
    'finishing': {
        'icon': 'üé®',
        'materials': [
            {
                'name_ru': '–ö—Ä–∞—Å–∫–∞',
                'name_en': 'Paint',
                'unit_ru': '–ª',
                'unit_en': 'l',
                'base_quantity': 5,  # –Ω–∞ 10 –∫–≤.–º.
                'base_price': 1000
            },
            {
                'name_ru': '–û–±–æ–∏',
                'name_en': 'Wallpaper',
                'unit_ru': '—Ä—É–ª',
                'unit_en': 'roll',
                'base_quantity': 2,  # –Ω–∞ 10 –∫–≤.–º.
                'base_price': 3000
            },
            {
                'name_ru': '–õ–∞–º–∏–Ω–∞—Ç',
                'name_en': 'Laminate',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 10,
                'base_price': 2000
            }
        ],
        'works': [
            {
                'name_ru': '–ü–æ–∫–ª–µ–π–∫–∞ –æ–±–æ–µ–≤',
                'name_en': 'Wallpaper installation',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 800
            },
            {
                'name_ru': '–£–∫–ª–∞–¥–∫–∞ –ª–∞–º–∏–Ω–∞—Ç–∞',
                'name_en': 'Laminate installation',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 600
            },
            {
                'name_ru': '–ü–æ–∫—Ä–∞—Å–∫–∞ –ø–æ—Ç–æ–ª–∫–∞',
                'name_en': 'Ceiling painting',
                'unit_ru': '–º¬≤',
                'unit_en': 'm¬≤',
                'base_quantity': 1,
                'base_price': 500
            }
        ]
    },
    'windows': {
        'icon': 'ü™ü',
        'materials': [
            {'name': '–û–∫–Ω–∞', 'unit': '—à—Ç', 'price': 50000},
            {'name': '–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏', 'unit': '—à—Ç', 'price': 5000},
            {'name': '–û—Ç–ª–∏–≤—ã', 'unit': '—à—Ç', 'price': 3000}
        ],
        'works': [
            {'name': '–î–µ–º–æ–Ω—Ç–∞–∂ —Å—Ç–∞—Ä—ã—Ö –æ–∫–æ–Ω', 'unit': '—à—Ç', 'price': 2000},
            {'name': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ–∫–æ–Ω', 'unit': '—à—Ç', 'price': 5000},
            {'name': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–æ–≤', 'unit': '—à—Ç', 'price': 2000}
        ]
    }
}

def calculate_step_details(step_key, area, quality, ceiling_coefficient=1.0):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
    step = STEP_DETAILS[step_key]
    quality_multiplier = {
        'standard': 1.0,
        'standard_plus': 1.5,
        'premium': 2.0
    }[quality]
    
    area_coefficient = math.ceil(area / 10)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∫–æ–≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
    
    materials = []
    for material in step['materials']:
        if 'base_quantity' in material:
            quantity = material['base_quantity'] * area_coefficient
            price = material['base_price'] * quality_multiplier
            materials.append({
                'name_ru': material['name_ru'],
                'name_en': material['name_en'],
                'unit_ru': material['unit_ru'],
                'unit_en': material['unit_en'],
                'quantity': quantity,
                'price': price
            })
        else:
            # –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            quantity = area_coefficient
            price = material['price'] * quality_multiplier
            materials.append({
                'name_ru': material['name'],
                'name_en': material['name'],
                'unit_ru': material['unit'],
                'unit_en': material['unit'],
                'quantity': quantity,
                'price': price
            })
    
    works = []
    for work in step['works']:
        if 'base_quantity' in work:
            if work['unit_ru'] == '–º¬≤':
                quantity = area
            else:
                quantity = work['base_quantity'] * area_coefficient
            price = work['base_price'] * quality_multiplier
            works.append({
                'name_ru': work['name_ru'],
                'name_en': work['name_en'],
                'unit_ru': work['unit_ru'],
                'unit_en': work['unit_en'],
                'quantity': quantity,
                'price': price
            })
        else:
            # –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            if work['unit'] == '–º¬≤':
                quantity = area
            else:
                quantity = area_coefficient
            price = work['price'] * quality_multiplier
            works.append({
                'name_ru': work['name'],
                'name_en': work['name'],
                'unit_ru': work['unit'],
                'unit_en': work['unit'],
                'quantity': quantity,
                'price': price
            })
    
    return {
        'materials': materials,
        'works': works
    }

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/planning')
def planning_overview():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –∏–∑ localStorage —á–µ—Ä–µ–∑ JavaScript
    return render_template('planning.html')

@app.route('/planning/<int:estimate_id>')
def planning(estimate_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    estimate = get_db().execute(
        'SELECT * FROM estimates WHERE id = ?',
        (estimate_id,)
    ).fetchone()
    
    if estimate is None:
        return render_template('error.html', message='–°–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'), 404
    
    return render_template('planning.html', estimate=estimate)

@app.route('/calculate', methods=['POST'])
def calculate():
    data = request.json
    quality = data['materials_quality']
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã—Å–æ—Ç—ã –ø–æ—Ç–æ–ª–∫–æ–≤ (–µ—Å–ª–∏ –≤—ã—à–µ 3–º)
    ceiling_coefficient = max(1.0, data['ceiling_height'] / 3.0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —à–∞–≥–∏ —Ä–µ–º–æ–Ω—Ç–∞
    steps = []
    base_duration = math.ceil(data['apartment_size'] / 10)  # 10 –∫–≤.–º. –≤ –¥–µ–Ω—å –±–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    
    # –û–±—â–∏–µ —Å—É–º–º—ã –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—Ç
    total_materials = 0
    total_work = 0
    
    if data['replanning']:
        step_details = calculate_step_details('replanning', data['apartment_size'], quality, ceiling_coefficient)
        step_materials = sum(item['price'] * item['quantity'] for item in step_details['materials'])
        step_works = sum(item['price'] * item['quantity'] for item in step_details['works'])
        total_materials += step_materials
        total_work += step_works
        steps.append({
            'title': '–ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞',
            'title_en': 'Replanning',
            'duration': math.ceil(base_duration * 0.5),
            'icon': STEP_DETAILS['replanning']['icon'],
            **step_details
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
    other_steps = [
        {
            'key': 'demolition',
            'title': '–î–µ–º–æ–Ω—Ç–∞–∂',
            'title_en': 'Demolition',
            'duration_coef': 0.3
        },
        {
            'key': 'rough_work',
            'title': '–ß–µ—Ä–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã',
            'title_en': 'Rough Work',
            'duration_coef': 1.0
        },
        {
            'key': 'plumbing',
            'title': '–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
            'title_en': 'Plumbing',
            'duration_coef': 0.2
        },
        {
            'key': 'electrical',
            'title': '–≠–ª–µ–∫—Ç—Ä–∏–∫–∞',
            'title_en': 'Electrical',
            'duration_coef': 0.5
        },
        {
            'key': 'finishing',
            'title': '–û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
            'title_en': 'Finishing',
            'duration_coef': 2.0
        }
    ]
    
    for step in other_steps:
        step_details = calculate_step_details(step['key'], data['apartment_size'], quality, ceiling_coefficient)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—Ç –¥–ª—è —Å–∞–Ω—É–∑–ª–æ–≤
        if step['key'] == 'plumbing':
            for material in step_details['materials']:
                material['quantity'] *= data['bathrooms_count']
            for work in step_details['works']:
                work['quantity'] *= data['bathrooms_count']
        
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—ã –¥–ª—è —ç—Ç–∞–ø–∞
        step_materials = sum(item['price'] * item['quantity'] for item in step_details['materials'])
        step_works = sum(item['price'] * item['quantity'] for item in step_details['works'])
        total_materials += step_materials
        total_work += step_works
        
        steps.append({
            'title': step['title'],
            'title_en': step['title_en'],
            'duration': math.ceil(base_duration * step['duration_coef']),
            'icon': STEP_DETAILS[step['key']]['icon'],
            **step_details
        })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∫–æ–Ω
    window_details = {
        'materials': [{
            'name_ru': '–û–∫–Ω–æ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π',
            'name_en': 'Window with installation',
            'unit_ru': '—à—Ç',
            'unit_en': 'pcs',
            'quantity': data['windows_count'],
            'price': PRICES[quality]['window']['materials']
        }],
        'works': [{
            'name_ru': '–ú–æ–Ω—Ç–∞–∂ –æ–∫–Ω–∞',
            'name_en': 'Window installation',
            'unit_ru': '—à—Ç',
            'unit_en': 'pcs',
            'quantity': data['windows_count'],
            'price': PRICES[quality]['window']['work']
        }]
    }
    
    if data['windows_count'] > 0:
        steps.append({
            'title': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–æ–Ω',
            'title_en': 'Window Installation',
            'duration': data['windows_count'],
            'icon': STEP_DETAILS['windows']['icon'],
            **window_details
        })
        total_materials += sum(item['price'] * item['quantity'] for item in window_details['materials'])
        total_work += sum(item['price'] * item['quantity'] for item in window_details['works'])
    
    return jsonify({
        'materials_cost': round(total_materials),
        'work_cost': round(total_work),
        'total_cost': round(total_materials + total_work),
        'steps': steps
    })

@app.route('/add_step', methods=['POST'])
def add_step():
    data = request.json
    step_key = data['key']
    step_title_ru = data['title_ru']
    step_title_en = data['title_en']
    step_icon = data.get('icon', 'üî®')  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏ –º–æ–ª–æ—Ç–∫–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç—Ç–∞–ø –≤ —Å–ª–æ–≤–∞—Ä—å STEP_DETAILS
    STEP_DETAILS[step_key] = {
        'icon': step_icon,
        'materials': [
            {'name': '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'unit': '—à—Ç', 'price': 1000},
            {'name': '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 'unit': '—à—Ç', 'price': 500}
        ],
        'works': [
            {'name': '–†–∞–±–æ—Ç—ã', 'unit': '–º¬≤', 'price': 1500},
            {'name': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', 'unit': '—à—Ç', 'price': 800}
        ]
    }
    
    return jsonify({'success': True, 'message': '–≠—Ç–∞–ø —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'})

@app.route('/api/planning/<int:estimate_id>', methods=['GET'])
def get_planning(estimate_id):
    try:
        planning_data = get_db().execute(
            'SELECT data FROM planning WHERE estimate_id = ?',
            (estimate_id,)
        ).fetchone()
        
        if planning_data is None:
            return jsonify({'weeks': []})
        
        return jsonify(json.loads(planning_data['data']))
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/planning/<int:estimate_id>', methods=['POST'])
def save_planning(estimate_id):
    try:
        data = request.get_json()
        db = get_db()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–ª–∞–Ω –¥–ª—è —ç—Ç–æ–π —Å–º–µ—Ç—ã
        existing = db.execute(
            'SELECT id FROM planning WHERE estimate_id = ?',
            (estimate_id,)
        ).fetchone()
        
        if existing:
            db.execute(
                'UPDATE planning SET data = ?, updated_at = CURRENT_TIMESTAMP WHERE estimate_id = ?',
                (json.dumps(data), estimate_id)
            )
        else:
            db.execute(
                'INSERT INTO planning (estimate_id, data) VALUES (?, ?)',
                (estimate_id, json.dumps(data))
            )
        
        db.commit()
        return jsonify({'status': 'success'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/marketplace')
def marketplace():
    return render_template('marketplace.html')

@app.route('/budget')
def budget():
    return render_template('budget.html')

@app.errorhandler(404)
def not_found_error(error):
    return render_template('error.html', message='–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('error.html', message='–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'), 500

if __name__ == '__main__':
    setup_directories()
    app.run(debug=True, port=5002) 
